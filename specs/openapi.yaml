openapi: 3.0.3
info:
  title: Finetune ERP API
  description: |
    Backend service for user, store and attendance management built with Django and Django REST Framework.
    
    ## Authentication
    Uses JWT tokens via `Authorization: Bearer <access-token>` header.
    
    ## Pagination
    Lists use Spring-style pagination with `content`, `pageable`, `totalElements`, etc.
    
    ## Error Format
    Errors return `{"detail": "message"}` or field-keyed validation errors.
    
    ## Idempotency
    Write endpoints under `attendance/admin/*` accept `Idempotency-Key` header.
  version: 1.0.0
  contact:
    name: Finetune ERP API
    url: https://api.finetune.store
  license:
    name: MIT
servers:
  - url: https://api.finetune.store/api
    description: Production server
  - url: https://finetunetechcrafterp-dev.up.railway.app/api
    description: Development server

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      description: Authenticate user and return JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    description: JWT access token (60 min)
                  refresh:
                    type: string
                    description: JWT refresh token (7 days)
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      description: Blacklist refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh]
              properties:
                refresh:
                  type: string
      responses:
        '200':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags: [Authentication]
      summary: Get current user profile
      description: Returns authenticated user's profile and mapped store geofences
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags: [Authentication]
      summary: Update current user profile
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /token/refresh:
    post:
      tags: [Authentication]
      summary: Refresh JWT token
      description: Rotate refresh token and issue new pair
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh]
              properties:
                refresh:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /token/verify:
    post:
      tags: [Authentication]
      summary: Verify JWT token
      description: Check if token is valid
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token is valid
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags: [Users]
      summary: List users
      description: System admin only - list all users with pagination
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Users]
      summary: Create user
      description: System admin only - create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Users]
      summary: Update user
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Users]
      summary: Delete user
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /stores:
    get:
      tags: [Stores]
      summary: List stores
      description: Public endpoint - list all stores
      security: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: Stores list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStores'
    post:
      tags: [Stores]
      summary: Create store
      description: System admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCreate'
      responses:
        '201':
          description: Store created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /stores/{id}/assign-branch-head:
    post:
      tags: [Stores]
      summary: Assign branch head to store
      description: System admin only
      parameters:
        - $ref: '#/components/parameters/StoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
              required: [user_id]
      responses:
        '200':
          description: Branch head assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /attendance/check-in:
    post:
      tags: [Attendance]
      summary: Check in
      description: Advisor check-in with location and optional selfie
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                longitude:
                  type: number
                  format: float
                selfie:
                  type: string
                  format: binary
                  description: Optional selfie image
              required: [latitude, longitude]
      responses:
        '201':
          description: Check-in successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /attendance/check-out:
    post:
      tags: [Attendance]
      summary: Check out
      description: Advisor check-out with location and optional selfie
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                longitude:
                  type: number
                  format: float
                selfie:
                  type: string
                  format: binary
                  description: Optional selfie image
              required: [latitude, longitude]
      responses:
        '200':
          description: Check-out successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /attendance/me/today:
    get:
      tags: [Attendance]
      summary: Get today's attendance status
      description: Returns today's shift window and attendance state for advisors
      responses:
        '200':
          description: Today's attendance status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodayStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      name: page
      in: query
      description: Page number (0-based)
      schema:
        type: integer
        minimum: 0
        default: 0
    Size:
      name: size
      in: query
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    UserId:
      name: id
      in: path
      required: true
      description: User ID
      schema:
        type: integer
    StoreId:
      name: id
      in: path
      required: true
      description: Store ID
      schema:
        type: integer

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
      required: [detail]

    ValidationError:
      type: object
      additionalProperties:
        type: array
        items:
          type: string

    UserProfile:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        role:
          type: string
          enum: [system_admin, branch_head, advisor]
        store_ids:
          type: array
          items:
            type: integer
        workledger_enabled:
          type: boolean
        store_geofences:
          type: array
          items:
            $ref: '#/components/schemas/StoreGeofence'
      required: [id, name, role, store_ids, workledger_enabled, store_geofences]

    StoreGeofence:
      type: object
      properties:
        store_id:
          type: integer
        lat:
          type: number
          format: float
        lon:
          type: number
          format: float
        radius_m:
          type: integer
        is_active:
          type: boolean
      required: [store_id, lat, lon, radius_m, is_active]

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [system_admin, branch_head, advisor]
        is_active:
          type: boolean
        store:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
      required: [id, username, email, name, role, is_active]

    UserCreate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [system_admin, branch_head, advisor]
        store:
          type: integer
          nullable: true
      required: [username, email, password, name, role]

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [system_admin, branch_head, advisor]
        is_active:
          type: boolean
        store:
          type: integer
          nullable: true

    Store:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        branch_head:
          type: integer
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
      required: [id, name, address, is_active]

    StoreCreate:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        branch_head:
          type: integer
          nullable: true
      required: [name, address]

    PaginatedUsers:
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/User'

    PaginatedStores:
      allOf:
        - $ref: '#/components/schemas/PaginationMeta'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Store'

    PaginationMeta:
      type: object
      properties:
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
            pageSize:
              type: integer
          required: [pageNumber, pageSize]
        totalElements:
          type: integer
        totalPages:
          type: integer
        last:
          type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean
      required: [pageable, totalElements, totalPages, last, first, numberOfElements, empty]

    Attendance:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
        date:
          type: string
          format: date
        check_in_time:
          type: string
          format: date-time
          nullable: true
        check_out_time:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: [present, absent, late, overtime]
        worked_minutes:
          type: integer
          nullable: true
        check_in_lat:
          type: number
          format: float
          nullable: true
        check_in_lon:
          type: number
          format: float
          nullable: true
        check_out_lat:
          type: number
          format: float
          nullable: true
        check_out_lon:
          type: number
          format: float
          nullable: true
      required: [id, user, date, status]

    TodayStatus:
      type: object
      properties:
        cta_state:
          type: string
          enum: [start, end, completed]
          description: Call-to-action state (start check-in, end check-out, completed)
        attendance_id:
          type: integer
          nullable: true
          description: Current attendance record ID if checked in
        shift_window:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
          required: [start, end]
        can_check_in_from:
          type: string
          format: date-time
          description: Earliest time advisor can check in
        banner:
          type: string
          nullable: true
          description: Optional banner message
        early_checkin_window_min:
          type: integer
          description: Minutes before shift start that check-in is allowed
        server_time:
          type: string
          format: date-time
          description: Current server time in Asia/Kolkata timezone
      required: [cta_state, attendance_id, shift_window, can_check_in_from, early_checkin_window_min, server_time]
